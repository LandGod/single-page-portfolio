{"version":3,"sources":["components/About.js","components/CurrentWork.js","contexts/MediaContext.js","components/ProjectCard.js","components/Modal.js","components/ToolTip.js","components/TechSelect.js","components/ButtonDrawer.js","components/Portfolio.js","components/ContactCard.js","components/Contact.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["About","className","id","role","src","alt","React","Component","Contact","state","showEmailPopup","togglePopup","setState","copyEmail","copyText","document","getElementById","select","setSelectionRange","execCommand","href","target","rel","useMedia","query","useState","window","matchMedia","matches","setMatches","useEffect","media","onchange","MediaContext","createContext","MediaContextProvider","props","cantHover","smBreakPoint","isIE","Provider","value","children","ProjectCard","mouseOver","setMouseOver","detailVisible","setDetailVisible","blured","setBlured","thisCard","createRef","mouseOnComponent","highlight","handleBlur","activeElement","Consumer","context","width","onMouseEnter","onMouseLeave","onFocus","onBlur","tabIndex","ref","aria-hidden","aria-label","title","toUpperCase","slice","summary","deployLink","repoLink","process","imageName","displayTitle","defaultProps","Modal","show","onHide","onClick","e","currentTarget","ToolTip","setShow","elementWidth","setElementWidth","thisToolTip","useRef","prevElementWidth","responsive","subModal","current","offsetWidth","suppressToolTip","style","flex","display","content","activationType","onKeyDown","event","key","blur","flip","marginLeft","paddingBottom","paddingTop","TechSelect","showTooltip","setShowTooltip","useContext","toggleTech","name","open","caseSensitiveName","aria-checked","image","ButtonDrawer","allowOverflow","setAllowOverflow","mediaState","toolTipTimer","setTimeout","clearTimeout","toggle","aria-expanded","height","transform","fill","rx","ry","fillRule","clipRule","d","fillOpacity","currentTechs","length","output","lastTech","pop","join","currentTechString","overflow","Portfolio","selectedTechs","drawerOpen","tech","updatedTechList","includes","filter","item","hasSelectedTechs","stack","i","isSelectedTech","toggleDawer","Techs","map","suppressTooltip","projects","project","techStack","mobileSize","ContactCard","linkToRepo","this","customClickAction","link","emailTooltipInner","bgWhite","readOnly","NavBar","setOpen","setOverflow","links","external","onscroll","keyCode","addEventListener","once","onScroll","type","viewBox","xmlns","strokeLinejoin","strokeLinecap","strokeMiterlimit","strokeWidth","stroke","App","CurrentWork","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.976ad7f2.chunk.js","sourcesContent":["import React from \"react\";\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div className=\"container box-border mx-auto px-6 lg:px-24\" id=\"aboutSection\"> {/* Id used for intra-page linking. Not used for css. Do not remove!*/}\n        <div className=\"flex flex-row flex-wrap justify-around\">\n          {/* Column containing text (with media query) */}\n          <div className=\"about__text-container w-full md:w-2/3\">\n            {/* Header and paragraph tag must be enclosed or flexbox will put them side-by-side when centering */}\n            <div>\n              <h1 className=\"text-6xl md:text-7xl mb-4 text-center md:text-left\">Hi, I'm Dan!</h1>\n              <h3 className=\"text-3xl md:text-4xl text-center md:text-left\" role=\"doc-subtitle\">\n                Web Developer with a background in the arts and theatre\n                technology\n              </h3>\n            </div>\n          </div>\n\n          {/* Column containing profile picture */}\n          <div className=\"about__img-container w-full md:w-1/3 flex justify-end\">\n            <figure>\n              <img\n                src={\n                  process.env.PUBLIC_URL + \"/misc_images/danielgoldphoto.jpg\"\n                }\n                className=\"about__img img-fluid my-3\"\n                alt=\"Daniel Gold\"\n              />\n            </figure>\n          </div>\n          {/* End image column*/}\n        </div>\n        {/* End row */}\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\n\nclass Contact extends React.Component {\n  state = { showEmailPopup: false };\n\n  togglePopup = () => {\n    this.setState({ showEmailPopup: !this.state.showEmailPopup });\n  };\n\n  copyEmail = () => {\n    // Get the text field\n    const copyText = document.getElementById(\"contact__email\");\n\n    // Select the text field\n    copyText.select();\n    copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n\n    // Copy the text inside the text field\n    document.execCommand(\"copy\");\n  };\n\n  render() {\n    return (\n      <div className=\"container mx-auto\" id=\"currentWorkSection\">\n        <div className=\"w-full mt-5 text-5xl lg:text-6xl font-bold text-center mb-2\">\n          <h1 className=\"mb-2\">Current Work</h1>\n          <hr className=\"contact__hr\" />\n        </div>\n        <div className=\"row px-6 lg:px-24\">\n          <ul>\n            <li className=\"mb-4\">\n              <h3 className=\"text-3xl lg:text-4xl font-semibold\">\n                <a\n                  href=\"https://jaquishbiomedical.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer nofollow\"\n                >\n                  Jaquish Biodmedical\n                </a>\n              </h3>\n              <a\n                href=\"https://jaquishbiomedical.com\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                <h5 className=\"text-xl lg:text-2xl\">Lead Web Developer</h5>\n              </a>\n              <div>\n                Hugo | HTML | SCSS | JavaScript | TailwindCSS | Netlify | AWS\n                Lambda\n              </div>\n            </li>\n            <li className=\"mb-4\">\n              <h3 className=\"text-3xl lg:text-4xl font-semibold inline-block\">\n                <a\n                  href=\"https://www.upwork.com/o/profiles/users/~01b3a381f688771981/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  UpWork\n                </a>\n              </h3>\n              <a\n                href=\"https://support.upwork.com/hc/en-us/articles/211068468-Top-Rated\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <image className=\"ml-3 pt-2 inline-block h-6\">\n                  <img\n                    className=\"\"\n                    src=\"/misc_images/upworkTopRated.png\"\n                    alt=\"Top Rated Badge\"\n                  />\n                </image>\n              </a>\n              <a\n                href=\"https://www.upwork.com/o/profiles/users/~01b3a381f688771981/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <h5 className=\"text-xl lg:text-2xl block\">\n                  Freelance Web Developer\n                </h5>\n              </a>\n              <div>\n                React | HTML | CSS | JavaScript | TypeScript | PHP | Python\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { useEffect, useState, createContext } from \"react\";\n\nfunction useMedia(query) {\n  // Set state hook to track query match status (boolean)\n  let [matches, setMatches] = useState(window.matchMedia(query).matches);\n\n  // Create effect hook to set value for state we just set up\n  useEffect(\n    () => {\n      let media = window.matchMedia(query);\n\n      // Update state only when a change is detected\n      if (media.matches !== matches) {\n        setMatches(media.matches);\n      }\n\n      // Set up listener for changes in query match status\n      let listener = () => {\n        setMatches(media.matches);\n      };\n      media.onchange = listener;\n      // Return teardown function for listener\n      return () => (media.onchange = null);\n    },\n\n    // Do not run this effect if the following value was not changed on update\n    [query, matches]\n  );\n\n  return matches;\n}\n\nexport const MediaContext = createContext();\n\nfunction MediaContextProvider(props) {\n  let cantHover = useMedia(\"(hover:none)\"); // Return true if device is touch-screen only (no mouse pointer)\n  let smBreakPoint = useMedia(\"(max-width: 767px)\"); // 540px is the sm breakpoint, but 768px is where things go off the rails for this app.\n  let isIE = useMedia(\n    \"screen and (min-width:0\\0) and (min-resolution: +72dpi)\"\n  ); // Checks if browser is IE 9 or above.\n\n  return (\n    <MediaContext.Provider\n      value={{ cantHover: cantHover, smBreakPoint: smBreakPoint, isIE: isIE }}\n    >\n      {props.children}\n    </MediaContext.Provider>\n  );\n}\n\nexport default MediaContextProvider;\n","import React, { useState, useEffect, createRef } from \"react\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nfunction ProjectCard(props) {\n  // PROPS:\n  //   width?: \"single\" or \"double\" - Makes the component 4 or 8 columns in medium view - Default = single\n  //   imageName: file name of image to be displayed\n  //   title: Name of project/title\n  //   repoLink?: link to project repo\n  //   deployLink?: link to deployed project\n  //   highlight: number - 0: tech missing; 1: no techs selected; 2: has all selected techs\n  //   summary: Short summary of the project\n  //   displayTitle?: boolean - set to true if the title needs to be displayed as text on top of the image overlay (not already in the image) - default true\n\n  // CONTEXT - This component consumes the MediaContext provider in order to be mobile responsive using the smBreakPoint property\n\n  // STATE & EFFECT:\n  //   State and effct here are used exclusively for the purpose of showing/hiding the title image overlay. The overlay should be hidden whenever the card is hovered over or in any way\n  //   gains focus. This reveals a description of the project and links to the deployed website and/or repo.\n  // The focus tracking modle here has two parts:\n  //   1. One is a state variable that tracks whether or not the element should behave as if it has focus. This is the detailVisible variable.\n  //   2. Our modle is two seperate state variables to track whether or not a focus-giving or focus losing event has occured. These are the mouseOver & blured state variables.\n  // Using this modle helps us avoid 2 key pitfalls:\n  //   1. On devices that can't hover, clicking on the element gives it a hover state so quickly that the mouse can actually click \"through\" the overlay to the underlying button\n  //     without the use having seen it first. This is undesireable and super confusing to users. They should only be able to click buttons they can see. By seperating getting focus\n  //     and hiding the overlay into seperate concerns, we can hide the overlay with a useEffect function, allowing the underlying buttons to be clicked only after they are revealed.\n  //   2. On IE/Edge, the css pseudoselector focus-within is not available. This means that tabselecting to an inner button of a project card, can cause the entire card to lose focus\n  //     before React realizes that a child is focused. This then causes the child buttons to lose focus anway, since they get hidden. Obviously this not what we want.\n\n  // State variables\n  const [mouseOver, setMouseOver] = useState(false); // Tracks wether or not the component has just recieved focus and/or mouse enter event\n  const [detailVisible, setDetailVisible] = useState(false); // Tracks whether or not the project info and buttons should be visible (ie: overlay title/image is invisible)\n  const [blured, setBlured] = useState(false); // Tracks whether or not any blur event has just occured on the card so that we can trigger our useEffect for blur handling\n\n  // Reference to highest level element in component, used for tracking if any part of the component has focus using DOM method\n  const thisCard = createRef();\n\n  // Called by onMouseEnter & onFocus. Does nothing if card is \"greyed out\" by technology filters.\n  const mouseOnComponent = () => {\n    if (props.highlight) {\n      setMouseOver(true);\n    }\n  };\n\n  // Called by onMouseLeave & onBlur\n  const handleBlur = () => {\n    setBlured(true);\n  };\n\n  // Explained above. Mediates visibiliy of overlay, since using raw focus/blur leads to issues.\n  useEffect(() => {\n    // Check for recent blur event\n    if (blured) {\n      // Blur events require a double check using this DOM method, since they are triggered even when focus is lost to an own child\n      if (!(document.activeElement === thisCard)) {\n        setDetailVisible(false);\n      }\n      return () => {\n        setBlured(false);\n      };\n    }\n    // If there was not a recent blur event, check for a recent mouseEnter/Hover event\n    else if (mouseOver) {\n      // This doesn't need to be double-checked with the DOM and doing so seems to introduce errors, so we don't.\n      setDetailVisible(true);\n      return () => {\n        setMouseOver(false);\n      };\n    }\n\n    // Because Blured & MouseOver are only meant to be true if a related event was just triggered, they are always reset to false after being read.\n    return () => {\n      if (blured) {\n        setBlured(false);\n        setMouseOver(false);\n      }\n    };\n  }, [blured, thisCard, mouseOver]);\n\n  return (\n    <MediaContext.Consumer>\n      {(context) => {\n        // The smBreakPoint context varaible returns true is below and false if above the standard bootstrap sm breakpoint.\n        const { smBreakPoint } = context;\n        return (\n          // Container with sizing info for overall component. Has handlers for onFocus and Blur attached.\n          // Can't do mouseover handling with css without using focus-within, but that isn't supported by IE/Edge\n          <div\n            className={`w-${props.width === \"double\" ? \"full\" : \"1/2\"} md:w-${\n              props.width === \"double\" ? \"1/2\" : \"1/3\"\n            } p-1 md:p-2 project__container inline-block`}\n            onMouseEnter={mouseOnComponent}\n            onMouseLeave={handleBlur}\n            onFocus={mouseOnComponent}\n            onBlur={handleBlur}\n            tabIndex={props.highlight ? \"0\" : \"-1\"}\n            ref={thisCard}\n            aria-hidden={props.highlight ? false : true}\n            aria-label={`Project: ${props.title}`}\n          >\n            {/* Project description. Covered by project overlay image when not focused or hovered. Contains A title, description, and links.  */}\n            <div\n              className={`project__details ${\n                props.highlight ? \"\" : \"project__details--grey\"\n              }`}\n            >\n              {/* Project title is not shown (in the details) on mobile since it's sort of redundant to the overlay anyway and takes up a ton of space. */}\n              {/* However, it is neccessary to add for screen readers, since they may blow past the container name if navigating using reading controlls other than tab */}\n              {smBreakPoint ? <h3 className=\"sr-only\">{props.title[0].toUpperCase() + props.title.slice(1)}</h3> : (\n                <h3>{props.title[0].toUpperCase() + props.title.slice(1)}</h3>\n              )}\n              <p>{props.summary}</p>\n              <div className=\"project__button-container\">\n                {/* Project buttons should (when the project is selectable) always have a tabIndex of 0, even when not visible, so that we can easily tab into them. \n                    However, they should lose tab-index when greyed out by the technology filter.*/}\n                {props.deployLink ? (\n                  <a\n                    tabIndex={props.highlight ? \"0\" : \"-1\"}\n                    className=\"btn btn-light focus:bg-gray-300 hover:bg-gray-300 focus:outline-white hover:outline-white\"\n                    href={props.deployLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    aria-label=\"Live website\"\n                  >\n                    {smBreakPoint ? \"Site\" : \"View Website\"}\n                  </a>\n                ) : null}\n                {props.repoLink ? (\n                  <a\n                    tabIndex={props.highlight ? \"0\" : \"-1\"}\n                    className=\"btn btn-light focus:bg-gray-300 hover:bg-gray-300 focus:outline-white hover:outline-white\"\n                    href={props.repoLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    aria-label=\"Source code on GitHub\"\n                  >\n                    {smBreakPoint ? \"Code\" : \"Source Code\"}\n                  </a>\n                ) : null}\n              </div>\n              {/* Begin portfolio Item overlay. This displays the title and image only when the project has not been focused or hovered. */}\n              {/* This should not be selectable and is aria-hidden, since it's just design sugar for looking cool. */}\n              <div\n                className={`project__overlay ${\n                  detailVisible ? \"project__overlay--hidden\" : \"\"\n                }`}\n                aria-hidden=\"true\"\n              >\n                <img\n                  className={`img-fluid project__img ${\n                    props.highlight ? \"\" : \"project__img--grey\"\n                  }`}\n                  src={`${process.env.PUBLIC_URL}/project_images/${props.imageName}`}\n                  alt={props.title}\n                  aria-hidden=\"true\"\n                />\n                {/* This is the container for displaying the project title on top of the image in the overlay. */}\n                {/* Can be hidden with props.displayTitle = false. Should be hidden if the image already has the title on it. */}\n                {props.displayTitle ? (\n                  <div\n                    className={\n                      props.highlight\n                        ? \"project__title\"\n                        : \"project__title--grey\"\n                    }\n                    aria-hidden=\"true\"\n                  >\n                    {/* Inner text container only exists to handle media query for font size */}\n                    <div className=\"px-2 project__title-inner md:px-8\" aria-label=\"none\">\n                      {/* Capitalized Title */}\n                      {props.title[0].toUpperCase() + props.title.slice(1)}\n                    </div>\n                  </div>\n                ) : null}\n                {/* End project overlay containing div */}\n              </div>\n              {/* Project details containing div */}\n            </div>\n            {/* End Project card overall container */}\n          </div>\n        );\n      }}\n    </MediaContext.Consumer>\n  );\n}\n\nProjectCard.defaultProps = {\n  width: \"single\",\n  displayTitle: true,\n};\n\nexport default ProjectCard;\n","function Modal(props) {\r\n  // Props:\r\n  // >>toggle: function - from parent that toggles drawer. No agruments.\r\n  // >>open: boolean - is drawer currently open.\r\n\r\n  const { show, onHide } = props;\r\n\r\n  // Trigger onHide for if a user clicks the background, but not if they click a child of the background (IE: The modal itself)\r\n  const closeOnBgClick = (e) => {\r\n    if (e.currentTarget === e.target) {\r\n      onHide(e);\r\n    }\r\n  }\r\n\r\n  return show ? (\r\n    <div id=\"modal-background pointer-events-none\" className=\"modal__background\" onClick={closeOnBgClick}>\r\n      <div className=\"mx-auto pointer-events-auto\">\r\n        <div id=\"modal-main\" className=\"w-72 bg-white rounded-md mx-auto p-4\">\r\n          <div className=\"flex flex-row justify-end w-full\">\r\n            <button\r\n              id=\"modal-x\"\r\n              className=\"modal__x\"\r\n              aria-label=\"close\"\r\n              onClick={onHide}\r\n            >\r\n              x\r\n            </button>\r\n          </div>\r\n          <div className=\"mx-auto text-center\">\r\n            {props.children}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n}\r\n\r\nexport default Modal;\r\n","import React, { useState, useEffect, useRef } from \"react\";\nimport Modal from \"./Modal\";\n\nfunction ToolTip(props) {\n  /* \n    PROPS:\n        -suppressToolTip: boolean = if true, tooltip is never shown. If false, default behavior.\n        -content: any html = content for the tooltip itself. IE: was is displayed in the tooltip.\n        -showTooltip: boolean = True shows tooltip, false hides tooltip\n        -flex: boolean = True sets container as a flexbox (useful for vertically centering children)\n        -flip: boolean = If true, display tooltip above rather than below child component\n        -activationType: 'hover' | 'click' = conditions under which tooltip should appear\n        -width?: number = Supply a number for the desired width (in pixels) that the tooltip should take up (cannot be used with responsive)\n        -responsive?: boolean (default false) = Width will be set to fit content and centering offset willl be calculated dynamically on render\n        -subModal: boolean = Set to true to activate component as modal instead of tooltip (ie: substitute modal for tooltip).\n    */\n\n  // Only used for modal mode, but can't be called conditionally, so will always be present.\n  const [show, setShow] = useState(false);\n  const [elementWidth, setElementWidth] = useState(null);\n  const thisToolTip = useRef(null);\n  const prevElementWidth = useRef();\n\n  const handleEscapePress = (event) => {\n    if (event.key === \"Escape\") {\n      event.target.blur();\n    }\n  };\n\n  useEffect(() => {\n    if (props.responsive && !props.subModal) {\n      // Debounce\n      if (\n        (prevElementWidth + 5 < elementWidth &&\n          elementWidth < prevElementWidth - 5) ||\n        !elementWidth\n      ) {\n        setElementWidth(thisToolTip.current.offsetWidth);\n        prevElementWidth.current = elementWidth;\n      }\n    }\n  }, [elementWidth, props.subModal, props.responsive]);\n\n  // If on mobile, use modal instead of tooltip\n  if (props.suppressToolTip) {\n    return (\n      <div style={props.flex ? { display: \"flex\" } : {}}>{props.children}</div>\n    );\n  }\n\n  if (props.subModal) {\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <div onClick={handleShow}>{props.children}</div>\n        <Modal\n          show={show}\n          onHide={handleClose}\n        >\n        {props.content}\n        </Modal>\n      </>\n    );\n  }\n\n  return (\n    <div\n      className={`tooltip ${\n        props.activationType === \"hover\"\n          ? \"tooltip--hoverable\"\n          : props.activationType === \"click\"\n          ? \"tooltip--clickable\"\n          : \"\"\n      } ${props.flex ? \"flex\" : \"\"}`}\n      onKeyDown={handleEscapePress}\n    >\n      {props.children}\n      <span\n        ref={thisToolTip}\n        className={`\n        tooltip__text\n        ${props.flip ? \"tooltip__text--top\" : \"tooltip__text--bottom\"}\n        `}\n        style={\n          props.width\n            ? {\n                width: `${props.width}px`,\n                marginLeft: `-${props.width / 2}px`,\n                paddingBottom: \"0.75em\",\n                paddingTop: \"0.75em\",\n              }\n            : props.responsive\n            ? { width: \"auto\", marginLeft: `calc(${elementWidth}px/-2)` }\n            : null\n        }\n      >\n        {props.content}\n      </span>\n    </div>\n  );\n}\n\nexport default ToolTip;\n","import React, { useState, useContext } from \"react\";\nimport ToolTip from \"./ToolTip\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nfunction TechSelect(props) {\n  /*\n  PROPS:\n    -name: string = short lowercase name of this technology\n    -caseSensitiveName: string = How the name of the technology should appear to the user\n    -highlight: 0 | 1 | 2 = For zero, image is made greyscale. 1 is normal appearance. 2 is normal with an underline (bottom border)\n    -image: string = file name with extention of image to be used (path to image - filename is already hardcoded)\n    -toggleTech: function = Function which shows or hides the tooltip when called.\n    -suppressTooltip: boolean = When true, tooltip will never appear\n  */\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const { cantHover } = useContext(MediaContext);\n\n  const toolTipShow = () => {\n    setShowTooltip(true);\n  };\n  const toolTipHide = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    // Note: This has to be a div, not a button, since the default styling from pseudo classes for buttons, such as :active and :hover\n    // will interfere\n    // Begin main container (basically a button)\n    <div\n      onMouseEnter={toolTipShow}\n      onMouseLeave={toolTipHide}\n      onClick={() => {\n        props.toggleTech(props.name);\n      }}\n      className={`tech w-1/6 md:w-1/12\n              ${props.highlight === 2 ? \"tech--highlight\" : \"\"}\n              inline-block\n            `}\n      tabIndex={props.open ? \"0\" : \"-1\"}\n      aria-hidden={!props.open}\n      role=\"switch\"\n      aria-label={`Technology: ${props.caseSensitiveName}`}\n      aria-checked={props.highlight ? true : false}\n    >\n      <ToolTip\n        suppressToolTip={cantHover}\n        content={props.caseSensitiveName}\n        showTooltip={showTooltip}\n        activationType=\"hover\"\n      >\n        {/* Begin image */}\n        <div className=\"tech__centerer\">\n          <img\n            alt={props.caseSensitiveName}\n            className={` img-fluid ${\n              props.highlight ? \"\" : \"tech__image--grey\"\n            } `}\n            src={`${process.env.PUBLIC_URL}/techs/${props.image}`}\n          />\n        </div>\n        {/* End image */}\n      </ToolTip>\n    </div>\n    // End main container\n  );\n}\n\nexport default TechSelect;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nfunction ButtonDrawer(props) {\n  // Props:\n  // >>toggle: function - from parent that toggles drawer. No agruments.\n  // >>open: boolean - is drawer currently open.\n\n  const [allowOverflow, setAllowOverflow] = useState(false);\n  const mediaState = useContext(MediaContext);\n\n  // In order to achieve a slide-out animated effect, overflow must be hidden while opening and closing (and while closed)\n  // however, overflow must be allowed while fully open to allow tooltips to be displayed properly.\n  // This effect, together with the allowOverFlow state allow overflow to be shown only when the drawer is fully open.\n\n  useEffect(() => {\n    // If component gets set to open after having been closed, allow overflow after animation finished (2 seconds)\n    if (props.open) {\n      const allowOverflowTrue = () => {\n        setAllowOverflow(true);\n      };\n      const toolTipTimer = setTimeout(allowOverflowTrue, 2000);\n\n      return () => {\n        clearTimeout(toolTipTimer);\n      };\n    }\n    //  If component gets closed after being open, imediately set overflow to false.\n    else {\n      setAllowOverflow(false);\n    }\n  }, [props.open, allowOverflow]);\n\n  const currentTechString = () => {\n    let output = [...props.currentTechs];\n    if (output.length > 1) {\n      let lastTech = output.pop();\n      return [...output, \"and\", lastTech].join(\" \");\n    }\n\n    return output[0];\n  };\n\n  return (\n    <>\n      <div className=\"drawer__outer\">\n        <button\n          className=\"plus__button\"\n          onClick={props.toggle}\n          aria-label=\"Filter Projects by Technology\"\n          aria-expanded={props.open}\n        >\n          <div className=\"plus__label\">Filter</div>\n          <div className=\"plus__inner\">\n            <svg className=\"plus__icon\" width=\"24\" height=\"24\" style={ props.open ? {transform:\"rotate(45deg)\"} : null}>\n              <rect width=\"24\" height=\"24\" fill=\"none\" rx=\"0\" ry=\"0\" />\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M11 17C11 17.55 11.45 18 12 18C12.55 18 13 17.55 13 17V13H17C17.55 13 18 12.55 18 12C18 11.45 17.55 11 17 11H13V7C13 6.45 12.55 6 12 6C11.45 6 11 6.45 11 7V11H7C6.45 11 6 11.45 6 12C6 12.55 6.45 13 7 13H11V17Z\"\n                fill=\"#ffffff\"\n              />\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM12 18C11.45 18 11 17.55 11 17V13H7C6.45 13 6 12.55 6 12C6 11.45 6.45 11 7 11H11V7C11 6.45 11.45 6 12 6C12.55 6 13 6.45 13 7V11H17C17.55 11 18 11.45 18 12C18 12.55 17.55 13 17 13H13V17C13 17.55 12.55 18 12 18Z\"\n                fill=\"#000000\"\n              />\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM12 18C11.45 18 11 17.55 11 17V13H7C6.45 13 6 12.55 6 12C6 11.45 6.45 11 7 11H11V7C11 6.45 11.45 6 12 6C12.55 6 13 6.45 13 7V11H17C17.55 11 18 11.45 18 12C18 12.55 17.55 13 17 13H13V17C13 17.55 12.55 18 12 18Z\"\n                fill=\"white\"\n                fillOpacity=\"0.01\"\n              />\n            </svg>\n          </div>\n        </button>\n        <span className=\"sr-only\" role=\"alert\">\n          {props.currentTechs.length < 1\n            ? \"Showing all projects.\"\n            : `Showing only projects which used: ${currentTechString()}`}\n        </span>\n      </div>\n      <div\n        className=\"drawer__inner container\"\n        style={{\n          height: `${\n            props.open ? (mediaState.smBreakPoint ? \"2rem\" : \"10rem\") : \"0\"\n          }`,\n          overflow: `${allowOverflow && props.open ? \"visible\" : \"hidden\"}`,\n        }}\n      >\n        {/* Info about selected tech for screen readers */}\n        {props.children}\n      </div>\n    </>\n  );\n}\n\nexport default ButtonDrawer;\n","import React from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport projects from \"../assets/projects.json\";\nimport TechSelect from \"./TechSelect\";\nimport Techs from \"../assets/techs.json\";\nimport ButtonDrawer from \"./ButtonDrawer\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nclass Portfolio extends React.Component {\n  state = {\n    selectedTechs: [],\n    drawerOpen: false,\n  };\n\n  toggleTech = (tech) => {\n    // If tech is 'reset' blank out tech list\n    if (tech === \"reset\") {\n      this.setState({ selectedTechs: [] });\n      return;\n    }\n\n    // Adds or removes the tech (string) from the selectedTechs array in the state\n    let updatedTechList;\n    if (this.state.selectedTechs.includes(tech)) {\n      updatedTechList = this.state.selectedTechs.filter(\n        (item) => item !== tech\n      );\n    } else {\n      updatedTechList = [tech, ...this.state.selectedTechs];\n    }\n\n    this.setState({ selectedTechs: updatedTechList });\n  };\n\n  hasSelectedTechs = (stack) => {\n    // If no techs are selected, alwasy return truthy number 1\n    // If card has all selected techs, return truthy number 2\n    // If card is missing one or more selected techs, return falsy number 0\n    if (this.state.selectedTechs.length === 0) {\n      return 1;\n    }\n\n    for (let i = 0; i < this.state.selectedTechs.length; i++) {\n      if (!stack.includes(this.state.selectedTechs[i])) {\n        return 0;\n      }\n    }\n\n    return 2;\n  };\n\n  isSelectedTech = (tech) => {\n    if (this.state.selectedTechs.length === 0) {\n      return 1;\n    }\n\n    if (this.state.selectedTechs.includes(tech)) {\n      return 2;\n    }\n\n    return 0;\n  };\n\n  toggleDawer = () => {\n    // For tech drawer (ButtonDrawer) open/close\n    // If closing drawer, also reset techs\n    if (this.state.drawerOpen) {\n      this.toggleTech(\"reset\");\n    }\n    this.setState({ drawerOpen: !this.state.drawerOpen });\n  };\n\n  render() {\n    return (\n      <MediaContext.Consumer>\n        {(context) => {\n          const { cantHover, smBreakPoint } = context;\n          return (\n            <div className=\"container flex flex-col mx-auto\" id=\"portfolioSection\">\n              {\" \"}\n              {/* Id used for linking to section, not for css. DO NOT DELETE. */}\n              <div className=\"flex-row\">\n                <div className=\"w-full text-center\">\n                  <h1 className=\"text-5xl lg:text-6xl font-bold mb-2\">Portfolio</h1>\n                  <hr className=\"portfolio__hr\" />\n                </div>\n              </div>\n              <ButtonDrawer\n                open={this.state.drawerOpen}\n                toggle={this.toggleDawer}\n                currentTechs={this.state.selectedTechs}\n              >\n                <div className=\"flex flex-row justify-center content-center\">\n                  {Techs.map((tech, i) => {\n                    return (\n                      <TechSelect\n                        key={i}\n                        name={tech.name}\n                        image={tech.image}\n                        caseSensitiveName={tech.caseSensitiveName}\n                        toggleTech={this.toggleTech}\n                        highlight={this.isSelectedTech(tech.name)}\n                        suppressTooltip={cantHover}\n                        open={this.state.drawerOpen}\n                      />\n                    );\n                  })}\n                  <div className=\"self-center justify-self-center w-1/6 md:w-1/12 flex\">\n                  <div\n                    className=\"rounded-sm md:rounded-md text-xs md:text-sm px-1 py-0 md:p-2 md:text-md mx-auto self-center justify-self-center bg-gray-400 text-white\"\n                    onClick={() => this.toggleTech(\"reset\")}\n                    role=\"button\"\n                    aria-label={`Reset Filter: Show all projects`}\n                    tabIndex={this.state.drawerOpen ? \"0\" : \"-1\"}\n                    aria-hidden={!this.state.drawerOpen}\n                  >\n                    Reset\n                  </div>\n                  </div>\n                </div>\n              </ButtonDrawer>\n              <div className=\"flex-row\">\n                {projects.map((project, i) => {\n                  return (\n                    <ProjectCard\n                      key={i}\n                      width={project.width}\n                      imageName={project.imageName}\n                      title={project.title}\n                      repoLink={project.repoLink}\n                      deployLink={project.deployLink}\n                      highlight={this.hasSelectedTechs(project.techStack)}\n                      mobileSize={smBreakPoint}\n                      summary={project.summary}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          );\n        }}\n      </MediaContext.Consumer>\n    );\n  }\n}\n\nexport default Portfolio;\n","import React from \"react\";\n\nclass ContactCard extends React.Component {\n  // Props:\n  // imageName: file name of image to be displayed\n  // title: Alt Text\n  // link: link to social site or file\n  // customClickAction: Icon is rendered as a button instead and uses the supplied function as its onclick\n\n  linkToRepo = () => {\n    window.open(this.props.repoLink);\n  };\n\n  render() {\n    return (\n      <div className=\"contact__container\">\n        <div\n          className=\"contact__card\"\n          href={this.props.repoLink}\n          target=\"_blank\"\n        >\n          {this.props.customClickAction ? (\n            <button\n              onClick={this.props.customClickAction}\n              className=\"contact__link btn btn-link\"\n            >\n              <img\n                className=\"contact__image img-fluid\"\n                src={`${process.env.PUBLIC_URL}/social_images/${this.props.imageName}`}\n                alt={this.props.title}\n              />\n            </button>\n          ) : (\n            <a\n              href={this.props.link}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"contact__link\"\n            >\n              <img\n                className=\"contact__image\"\n                src={`${process.env.PUBLIC_URL}/social_images/${this.props.imageName}`}\n                alt={this.props.title}\n              />\n            </a>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContactCard;\n","import React from \"react\";\nimport ToolTip from \"./ToolTip\";\nimport ContactCard from \"./ContactCard\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nclass Contact extends React.Component {\n  state = { showEmailPopup: false };\n\n  togglePopup = () => {\n    this.setState({ showEmailPopup: !this.state.showEmailPopup });\n  };\n\n  copyEmail = () => {\n    // Get the text field\n    const copyText = document.getElementById(\"contact__email\") || document.getElementById(\"contact__email--blue\");\n\n    // Select the text field\n    copyText.select();\n    copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n\n    // Copy the text inside the text field\n    document.execCommand(\"copy\");\n  };\n\n  emailTooltipInner = (bgWhite) => {\n    return (\n      <div className=\"container\" tabIndex=\"-1\">\n        <div className=\"flex flex-row\">\n          <textarea\n            id={`${bgWhite ? \"contact__email--blue\" : \"contact__email\"}`}\n            className=\"w-full p-0 m-0 text-center underline dotted\"\n            value=\"DanielJasonGold@gmail.com\"\n            readOnly\n          />\n        </div>\n        <div className=\"flex-row\">\n          <button\n            className={`btn btn-sm btn-light mx-auto ${ bgWhite ? \"modal__button--blue\" : ''} focus:bg-gray-300 hover:bg-gray-300 focus:outline-white hover:outline-white focus:text-black hover:text-black mr-1`}\n            onClick={this.copyEmail}\n          >\n            Copy\n          </button>\n          <a\n            className={`btn btn-sm btn-light mx-auto ${ bgWhite ? \"modal__button--blue\" : ''} focus:bg-gray-300 hover:bg-gray-300 focus:outline-white hover:outline-white focus:text-black hover:text-black ml-1`}\n            href=\"mailto:DanielJasonGold@gmail.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Compose\n          </a>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <MediaContext.Consumer>\n        {(context) => {\n          const { smBreakPoint, isIE } = context;\n          return (\n            <div className=\"container mx-auto\" id=\"contactSection\">\n              <div className=\"flex flex-row\">\n                <div className=\"w-full mt-5\">\n                  <h1 className=\"text-6xl font-bold text-center\">Contact</h1>\n                  <hr className=\"my-2 contact__hr\" />\n                </div>\n              </div>\n              <div className=\"flex flex-row\">\n                <div className=\"inline-block w-1/2 p-1 md:w-1/4 p-md-2\">\n                  <ContactCard\n                    imageName=\"twitter.svg\"\n                    title=\"Daniel Gold on Twitter\"\n                    link=\"https://twitter.com/DanJGold\"\n                  />\n                </div>\n                <div className=\"inline-block w-1/2 p-1 md:w-1/4 p-md-2\">\n                  <ContactCard\n                    imageName=\"linkedin.svg\"\n                    title=\"Daniel Gold on LinkedIn\"\n                    link=\"https://www.linkedin.com/in/danjasongold/\"\n                  />\n                </div>\n                <div className=\"inline-block w-1/2 p-1 md:w-1/4 p-md-2\">\n                  <ContactCard\n                    imageName=\"github.svg\"\n                    title=\"LandGod on GitHub\"\n                    link=\"https://www.github.com/landgod\"\n                  />\n                </div>\n                <div className=\"inline-block w-1/2 p-1 md:w-1/4 p-md-2\">\n                  <ToolTip\n                    content={this.emailTooltipInner(smBreakPoint ? true : false)}\n                    showTooltip={this.state.showEmailPopup}\n                    flip={true}\n                    activationType=\"click\"\n                    width={240}\n                    subModal={smBreakPoint || isIE ? true : false}\n                  >\n                    <ContactCard\n                      imageName=\"email.svg\"\n                      title=\"DanielJasonGold@gmail.com\"\n                      customClickAction={this.togglePopup}\n                    />\n                  </ToolTip>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </MediaContext.Consumer>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { useState, useEffect } from \"react\";\n\nfunction NavBar() {\n  // Reveal navar\n  const [open, setOpen] = useState(false);\n  // Track overflow for revealing further dropdowns (on mobile)\n  const [overflow, setOverflow] = useState(false);\n\n  const links = [\n    { display: \"Current Work\", link: \"#currentWorkSection\" },\n    { display: \"Portfolio\", link: \"#portfolioSection\" },\n    {\n      display: \"Resume\",\n      link: `${process.env.PUBLIC_URL}/DanielGold.pdf`,\n      external: true,\n    },\n  ];\n\n  useEffect(() => {\n    // Trigger reveal navbar (via making height not 0) as soon as user scrolls page.\n    // Should never do anything after that initial scroll\n    let onScroll;\n\n    if (!open) {\n      onscroll = (e) => {\n        // Check for [tab] press\n        if (e.keyCode) {\n          if (e.keyCode !== 9) {\n            return;\n          }\n        }\n        // Reveal navbar\n        setOpen(true);\n      };\n\n      window.addEventListener(\"scroll\", onscroll, { once: \"true\" });\n      window.addEventListener(\"keyup\", onscroll, { once: \"true\" });\n    }\n    return () => {\n      if (onScroll) {\n        window.removeEventListener(\"scroll\", onscroll);\n        window.removeEventListener(\"keyup\", onscroll);\n      }\n    };\n  });\n\n  return (\n    <div\n      className=\"nav__opener\"\n      style={{\n        height: open ? \"54px\" : \"0px\",\n        overflow: overflow ? \"visible\" : \"hidden\",\n      }}\n    >\n      <nav className=\"relative flex flex-wrap items-center justify-between px-2 py-3 navbar-expand-lg bg-gray-100 mb-3\">\n        <div className=\"container px-4 mx-auto flex flex-wrap items-center justify-between\">\n          <div className=\"w-full relative flex justify-between lg:w-auto lg:static lg:block lg:justify-start\">\n            <a\n              className=\"text-lg leading-relaxed inline-block whitespace-no-wrap text-black font-semibold\"\n              href=\"#aboutSection\"\n            >\n              Dan Gold\n            </a>\n            <button\n              className=\"text-white cursor-pointer text-xl leading-none px-3 py-1 border border-solid border-transparent rounded bg-transparent block lg:hidden outline-none focus:outline-none\"\n              type=\"button\"\n              onClick={() => (open ? setOverflow(!overflow) : null)}\n            >\n              <svg\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className=\"text-gray-900\"\n              >\n                <path\n                  strokeLinejoin=\"round\"\n                  strokeLinecap=\"round\"\n                  strokeMiterlimit=\"10\"\n                  strokeWidth=\"1\"\n                  stroke=\"currentColor\"\n                  d=\"M3 18H21\"\n                ></path>\n                <path\n                  strokeLinejoin=\"round\"\n                  strokeLinecap=\"round\"\n                  strokeMiterlimit=\"10\"\n                  strokeWidth=\"1\"\n                  stroke=\"#221b38\"\n                  d=\"M3 12H21\"\n                ></path>\n                <path\n                  strokeLinejoin=\"round\"\n                  strokeLinecap=\"round\"\n                  strokeMiterlimit=\"10\"\n                  strokeWidth=\"1\"\n                  stroke=\"#221b38\"\n                  d=\"M3 6H21\"\n                ></path>\n              </svg>\n            </button>\n          </div>\n          <div\n            className={\n              \"lg:flex flex-grow items-center\" + (open ? \" flex\" : \" hidden\")\n            }\n            id=\"example-navbar-danger\"\n          >\n            <ul className=\"flex flex-col lg:flex-row list-none lg:ml-auto\">\n              {links.map((item, key) => (\n                <li className=\"nav-item\" key={key}>\n                  <a\n                    className=\"px-3 py-2 flex items-center text-xs uppercase font-bold leading-snug text-black hover:opacity-75\"\n                    href={item.link}\n                    target={item.external ? \"_blank\" : \"_self\"}\n                    rel={item.external ? \"noreferrer\" : \"\"}\n                  >\n                    <span className=\"ml-2\">{item.display}</span>\n                  </a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport About from \"./components/About\";\nimport CurrentWork from \"./components/CurrentWork\";\nimport Portfolio from \"./components/Portfolio\";\nimport Contact from \"./components/Contact\";\nimport NavBar from \"./components/NavBar\";\nimport MediaContextProvider from \"./contexts/MediaContext\";\n\nimport \"./index.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <MediaContextProvider>\n        <About/>\n        <CurrentWork/>\n        <Portfolio/>\n        <Contact />\n      </MediaContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}