{"version":3,"sources":["components/About.js","contexts/MediaContext.js","components/ProjectCard.js","components/ToolTip.js","components/TechSelect.js","components/ButtonDrawer.js","components/Portfolio.js","components/ContactCard.js","components/Contact.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["About","className","id","src","alt","React","Component","useMedia","query","useState","window","matchMedia","matches","setMatches","useEffect","media","listener","addListener","removeListener","MediaContext","createContext","MediaContextProvider","props","cantHover","smBreakPoint","isIE","Provider","value","children","ProjectCard","mouseOver","setMouseOver","detailVisible","setDetailVisible","blured","setBlured","thisCard","createRef","mouseOnComponent","highlight","handleBlur","document","activeElement","Consumer","context","width","onMouseEnter","onMouseLeave","onFocus","onBlur","tabIndex","ref","aria-hidden","aria-label","title","toUpperCase","slice","summary","deployLink","href","target","rel","repoLink","process","imageName","displayTitle","defaultProps","ToolTip","show","setShow","suppressToolTip","style","flex","display","subModal","onClick","Modal","onHide","aria-labelledby","dialogClassName","centered","Header","closeButton","Body","content","activationType","onKeyDown","event","key","blur","responsive","flip","offset","marginLeft","TechSelect","showTooltip","setShowTooltip","useContext","toggleTech","name","open","role","caseSensitiveName","aria-checked","image","ButtonDrawer","allowOverflow","setAllowOverflow","mediaState","toolTipTimer","setTimeout","clearTimeout","toggle","aria-expanded","height","transform","fill","rx","ry","fillRule","clipRule","d","fillOpacity","currentTechs","length","output","lastTech","pop","join","currentTechString","overflow","Portfolio","state","selectedTechs","drawerOpen","tech","updatedTechList","includes","filter","item","setState","hasSelectedTechs","stack","i","isSelectedTech","toggleDawer","Techs","map","suppressTooltip","paddingTop","paddingBottom","projects","project","techStack","mobileSize","ContactCard","linkToRepo","this","customClickAction","link","Contact","showEmailPopup","togglePopup","copyEmail","copyText","getElementById","select","setSelectionRange","execCommand","emailTooltipInner","bgWhite","readOnly","Brand","Navbar","Toggle","Collapse","NavBar","setOpen","setOverflow","onscroll","e","keyCode","addEventListener","once","onScroll","expand","aria-controls","Nav","Link","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f1873fe.chunk.js","sourcesContent":["import React from \"react\";\n\nclass About extends React.Component {\n  render() {\n    return (\n      <div className=\"container\" id=\"aboutSection\"> {/* Id used for intra-page linking. Not used for css. Do not remove!*/}\n        <div className=\"row justify-content-around\">\n          {/* Column containing text (with media query) */}\n          <div className=\"about__text-container col-12 col-md-8\">\n            {/* Header and paragraph tag must be enclosed or flexbox will put them side-by-side when centering */}\n            <div>\n              <div className=\"about__header\">Hi, I'm Dan!</div>\n              <p className=\"about__text\">\n                Web Developer with a background in the arts and theatre\n                technology\n              </p>\n            </div>\n          </div>\n\n          {/* Column containing profile picture */}\n          <div className=\"about__img-container col-12 col-md-4\">\n            <figure>\n              <img\n                src={\n                  process.env.PUBLIC_URL + \"/misc_images/danielgoldphoto.jpg\"\n                }\n                className=\"about__img img-fluid my-3\"\n                alt=\"Daniel Gold\"\n              />\n            </figure>\n          </div>\n          {/* End image column*/}\n        </div>\n        {/* End row */}\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { useEffect, useState, createContext } from \"react\";\n\nfunction useMedia(query) {\n  // Set state hook to track query match status (boolean)\n  let [matches, setMatches] = useState(window.matchMedia(query).matches);\n\n  // Create effect hook to set value for state we just set up\n  useEffect(\n    () => {\n      let media = window.matchMedia(query);\n\n      // Update state only when a change is detected\n      if (media.matches !== matches) {\n        setMatches(media.matches);\n      }\n\n      // Set up listener for changes in query match status\n      let listener = () => setMatches(media.matches);\n      media.addListener(listener);\n\n      // Return teardown function for listener\n      return () => media.removeListener(listener);\n    },\n\n    // Do not run this effect if the following value was not changed on update\n    [query, matches]\n  );\n\n  return matches;\n}\n\nexport const MediaContext = createContext();\n\nfunction MediaContextProvider(props) {\n  let cantHover = useMedia(\"(hover:none)\"); // Return true if device is touch-screen only (no mouse pointer)\n  let smBreakPoint = useMedia(\"(max-width: 767px)\"); // 540px is the sm breakpoint, but 768px is where things go off the rails for this app.\n  let isIE = useMedia(\"screen and (min-width:0\\0) and (min-resolution: +72dpi)\") // Checks if browser is IE 9 or above.\n\n  return (\n    <MediaContext.Provider\n      value={{ cantHover: cantHover, smBreakPoint: smBreakPoint, isIE:isIE }}\n    >\n      {props.children}\n    </MediaContext.Provider>\n  );\n}\n\nexport default MediaContextProvider;\n","import React, { useState, useEffect, createRef } from \"react\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nfunction ProjectCard(props) {\n  // PROPS:\n  //   width?: \"single\" or \"double\" - Makes the component 4 or 8 columns in medium view - Default = single\n  //   imageName: file name of image to be displayed\n  //   title: Name of project/title\n  //   repoLink?: link to project repo\n  //   deployLink?: link to deployed project\n  //   highlight: number - 0: tech missing; 1: no techs selected; 2: has all selected techs\n  //   summary: Short summary of the project\n  //   displayTitle?: boolean - set to true if the title needs to be displayed as text on top of the image overlay (not already in the image) - default true\n\n  // CONTEXT - This component consumes the MediaContext provider in order to be mobile responsive using the smBreakPoint property\n\n  // STATE & EFFECT:\n  //   State and effct here are used exclusively for the purpose of showing/hiding the title image overlay. The overlay should be hidden whenever the card is hovered over or in any way\n  //   gains focus. This reveals a description of the project and links to the deployed website and/or repo.\n  // The focus tracking modle here has two parts:\n  //   1. One is a state variable that tracks whether or not the element should behave as if it has focus. This is the detailVisible variable.\n  //   2. Our modle is two seperate state variables to track whether or not a focus-giving or focus losing event has occured. These are the mouseOver & blured state variables.\n  // Using this modle helps us avoid 2 key pitfalls:\n  //   1. On devices that can't hover, clicking on the element gives it a hover state so quickly that the mouse can actually click \"through\" the overlay to the underlying button\n  //     without the use having seen it first. This is undesireable and super confusing to users. They should only be able to click buttons they can see. By seperating getting focus\n  //     and hiding the overlay into seperate concerns, we can hide the overlay with a useEffect function, allowing the underlying buttons to be clicked only after they are revealed.\n  //   2. On IE/Edge, the css pseudoselector focus-within is not available. This means that tabselecting to an inner button of a project card, can cause the entire card to lose focus\n  //     before React realizes that a child is focused. This then causes the child buttons to lose focus anway, since they get hidden. Obviously this not what we want.\n\n  // State variables\n  const [mouseOver, setMouseOver] = useState(false); // Tracks wether or not the component has just recieved focus and/or mouse enter event\n  const [detailVisible, setDetailVisible] = useState(false); // Tracks whether or not the project info and buttons should be visible (ie: overlay title/image is invisible)\n  const [blured, setBlured] = useState(false); // Tracks whether or not any blur event has just occured on the card so that we can trigger our useEffect for blur handling\n\n  // Reference to highest level element in component, used for tracking if any part of the component has focus using DOM method\n  const thisCard = createRef();\n\n  // Called by onMouseEnter & onFocus. Does nothing if card is \"greyed out\" by technology filters.\n  const mouseOnComponent = () => {\n    if (props.highlight) {\n      setMouseOver(true);\n    }\n  };\n\n  // Called by onMouseLeave & onBlur\n  const handleBlur = () => {\n    setBlured(true);\n  };\n\n  // Explained above. Mediates visibiliy of overlay, since using raw focus/blur leads to issues.\n  useEffect(() => {\n    // Check for recent blur event\n    if (blured) {\n      // Blur events require a double check using this DOM method, since they are triggered even when focus is lost to an own child\n      if (!(document.activeElement === thisCard)) {\n        setDetailVisible(false);\n      }\n      return () => {\n        setBlured(false);\n      };\n    }\n    // If there was not a recent blur event, check for a recent mouseEnter/Hover event\n    else if (mouseOver) {\n      // This doesn't need to be double-checked with the DOM and doing so seems to introduce errors, so we don't.\n      setDetailVisible(true);\n      return () => {\n        setMouseOver(false);\n      };\n    }\n\n    // Because Blured & MouseOver are only meant to be true if a related event was just triggered, they are always reset to false after being read.\n    return () => {\n      if (blured) {\n        setBlured(false);\n        setMouseOver(false);\n      }\n    };\n  }, [blured, thisCard, mouseOver]);\n\n  return (\n    <MediaContext.Consumer>\n      {(context) => {\n        // The smBreakPoint context varaible returns true is below and false if above the standard bootstrap sm breakpoint.\n        const { smBreakPoint } = context;\n        return (\n          // Container with sizing info for overall component. Has handlers for onFocus and Blur attached.\n          // Can't do mouseover handling with css without using focus-within, but that isn't supported by IE/Edge\n          <div\n            className={`col-${props.width === \"double\" ? \"12\" : \"6\"} col-md-${\n              props.width === \"double\" ? \"6\" : \"4\"\n            } p-1 p-md-2 project__container`}\n            onMouseEnter={mouseOnComponent}\n            onMouseLeave={handleBlur}\n            onFocus={mouseOnComponent}\n            onBlur={handleBlur}\n            tabIndex={props.highlight ? \"0\" : \"-1\"}\n            ref={thisCard}\n            aria-hidden={props.highlight ? false : true}\n            aria-label={`Project: ${props.title}`}\n          >\n            {/* Project description. Covered by project overlay image when not focused or hovered. Contains A title, description, and links.  */}\n            <div\n              className={`project__details ${\n                props.highlight ? \"\" : \"project__details--grey\"\n              }`}\n            >\n              {/* Project title is not shown (in the details) on mobile since it's sort of redundant to the overlay anyway and takes up a ton of space. */}\n              {/* However, it is neccessary to add for screen readers, since they may blow past the container name if navigating using reading controlls other than tab */}\n              {smBreakPoint ? <h3 className=\"sr-only\">{props.title[0].toUpperCase() + props.title.slice(1)}</h3> : (\n                <h3>{props.title[0].toUpperCase() + props.title.slice(1)}</h3>\n              )}\n              <p>{props.summary}</p>\n              <div className=\"project__button-container\">\n                {/* Project buttons should (when the project is selectable) always have a tabIndex of 0, even when not visible, so that we can easily tab into them. \n                    However, they should lose tab-index when greyed out by the technology filter.*/}\n                {props.deployLink ? (\n                  <a\n                    tabIndex={props.highlight ? \"0\" : \"-1\"}\n                    className=\"btn btn-light project__button\"\n                    href={props.deployLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    aria-label=\"Live website\"\n                  >\n                    {smBreakPoint ? \"Site\" : \"View Website\"}\n                  </a>\n                ) : null}\n                {props.repoLink ? (\n                  <a\n                    tabIndex={props.highlight ? \"0\" : \"-1\"}\n                    className=\"btn btn-light project__button\"\n                    href={props.repoLink}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    aria-label=\"Source code on GitHub\"\n                  >\n                    {smBreakPoint ? \"Code\" : \"Source Code\"}\n                  </a>\n                ) : null}\n              </div>\n              {/* Begin portfolio Item overlay. This displays the title and image only when the project has not been focused or hovered. */}\n              {/* This should not be selectable and is aria-hidden, since it's just design sugar for looking cool. */}\n              <div\n                className={`project__overlay ${\n                  detailVisible ? \"project__overlay--hidden\" : \"\"\n                }`}\n                aria-hidden=\"true\"\n              >\n                <img\n                  className={`img-fluid project__img ${\n                    props.highlight ? \"\" : \"project__img--grey\"\n                  }`}\n                  src={`${process.env.PUBLIC_URL}/project_images/${props.imageName}`}\n                  alt={props.title}\n                  aria-hidden=\"true\"\n                />\n                {/* This is the container for displaying the project title on top of the image in the overlay. */}\n                {/* Can be hidden with props.displayTitle = false. Should be hidden if the image already has the title on it. */}\n                {props.displayTitle ? (\n                  <div\n                    className={\n                      props.highlight\n                        ? \"project__title\"\n                        : \"project__title--grey\"\n                    }\n                    aria-hidden=\"true\"\n                  >\n                    {/* Inner text container only exists to handle media query for font size */}\n                    <div className=\"project__title-inner\" aria-label=\"none\">\n                      {/* Capitalized Title */}\n                      {props.title[0].toUpperCase() + props.title.slice(1)}\n                    </div>\n                  </div>\n                ) : null}\n                {/* End project overlay containing div */}\n              </div>\n              {/* Project details containing div */}\n            </div>\n            {/* End Project card overall container */}\n          </div>\n        );\n      }}\n    </MediaContext.Consumer>\n  );\n}\n\nProjectCard.defaultProps = {\n  width: \"single\",\n  displayTitle: true,\n};\n\nexport default ProjectCard;\n","import React, { useState } from \"react\";\nimport { Modal } from \"react-bootstrap\";\n\nfunction ToolTip(props) {\n  /* \n    PROPS:\n        -suppressToolTip: boolean = if true, tooltip is never shown. If false, default behavior.\n        -content: any html = content for the tooltip itself. IE: was is displayed in the tooltip.\n        -showTooltip: boolean = True shows tooltip, false hides tooltip\n        -flex: boolean = True sets container as a flexbox (useful for vertically centering children)\n        -flip: boolean = If true, display tooltip above rather than below child component\n        -activationType: 'hover' | 'click' = conditions under which tooltip should appear\n        -responsive: boolean = false uses default sizing via pixels, true fits tooltip to content\n        -offset: number = use with responsive to center element since value will need to depend on tooltip size\n        -subModal: boolean = Set to true to activate component as modal instead of tooltip (ie: substitute modal for tooltip).\n    */\n\n  // Only used for modal mode, but can't be called conditionally, so will always be present.\n  const [show, setShow] = useState(false);\n\n  const handleEscapePress = (event) => {\n    if (event.key === \"Escape\") {\n      event.target.blur();\n    }\n  };\n\n  // If on mobile, use modal instead of tooltip\n  if (props.suppressToolTip) {\n    return (\n      <div style={props.flex ? { display: \"flex\" } : {}}>{props.children}</div>\n    );\n  }\n\n  if (props.subModal) {\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n      <>\n        <div onClick={handleShow}>{props.children}</div>\n        <Modal\n          show={show}\n          onHide={handleClose}\n          aria-labelledby=\"contained-modal-title-vcenter\"\n          dialogClassName=\"tooltip__modal\"\n          centered\n        >\n          <Modal.Header closeButton></Modal.Header>\n          <Modal.Body>{props.content}</Modal.Body>\n        </Modal>\n      </>\n    );\n  }\n\n  return (\n    <div\n      className={`tooltip ${\n        props.activationType === \"hover\"\n          ? \"tooltip--hoverable\"\n          : props.activationType === \"click\"\n          ? \"tooltip--clickable\"\n          : \"\"\n      } ${props.flex ? \"display-flex\" : \"\"}`}\n      onKeyDown={handleEscapePress}\n    >\n      {props.children}\n      <span\n        className={`\n        tooltip__text\n        ${props.responsive ? \"tooltip__text--responsive\" : \"\"}\n        ${props.flip ? \"tooltip__text--top\" : \"tooltip__text--bottom\"}\n        `}\n        style={props.offset ? { marginLeft: props.offset } : {}}\n      >\n        {props.content}\n      </span>\n    </div>\n  );\n}\n\nexport default ToolTip;\n","import React, { useState, useContext } from \"react\";\nimport ToolTip from \"./ToolTip\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nfunction TechSelect(props) {\n  /*\n  PROPS:\n    -name: string = short lowercase name of this technology\n    -caseSensitiveName: string = How the name of the technology should appear to the user\n    -highlight: 0 | 1 | 2 = For zero, image is made greyscale. 1 is normal appearance. 2 is normal with an underline (bottom border)\n    -image: string = file name with extention of image to be used (path to image - filename is already hardcoded)\n    -toggleTech: function = Function which shows or hides the tooltip when called.\n    -suppressTooltip: boolean = When true, tooltip will never appear\n  */\n\n  const [showTooltip, setShowTooltip] = useState(false);\n  const { cantHover } = useContext(MediaContext);\n\n  const toolTipShow = () => {\n    setShowTooltip(true);\n  };\n  const toolTipHide = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    // Note: This has to be a div, not a button, since the default styling from pseudo classes for buttons, such as :active and :hover\n    // will interfer\n    // Begin main continer (basically a button)\n    <div\n      onMouseEnter={toolTipShow}\n      onMouseLeave={toolTipHide}\n      onClick={() => {\n        props.toggleTech(props.name);\n      }}\n      className={`tech col-2 col-md-1\n              ${props.highlight === 2 ? \"tech--highlight\" : \"\"}\n            `}\n      tabIndex={props.open ? \"0\" : \"-1\"}\n      aria-hidden={!props.open}\n      role=\"switch\"\n      aria-label={`Technology: ${props.caseSensitiveName}`}\n      aria-checked={props.highlight ? true : false}\n    >\n      <ToolTip\n        suppressToolTip={cantHover}\n        content={props.caseSensitiveName}\n        showTooltip={showTooltip}\n        activationType=\"hover\"\n      >\n        {/* Begin image */}\n        <div className=\"tech__centerer\">\n          <img\n            alt={props.caseSensitiveName}\n            className={` img-fluid ${\n              props.highlight ? \"\" : \"tech__image--grey\"\n            } `}\n            src={`${process.env.PUBLIC_URL}/techs/${props.image}`}\n          />\n        </div>\n        {/* End image */}\n      </ToolTip>\n    </div>\n    // End main container\n  );\n}\n\nexport default TechSelect;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nfunction ButtonDrawer(props) {\n  // Props:\n  // >>toggle: function - from parent that toggles drawer. No agruments.\n  // >>open: boolean - is drawer currently open.\n\n  const [allowOverflow, setAllowOverflow] = useState(false);\n  const mediaState = useContext(MediaContext);\n\n  // In order to achieve a slide-out animated effect, overflow must be hidden while opening and closing (and while closed)\n  // however, overflow must be allowed while fully open to allow tooltips to be displayed properly.\n  // This effect, together with the allowOverFlow state allow overflow to be shown only when the drawer is fully open.\n\n  useEffect(() => {\n    // If component gets set to open after having been closed, allow overflow after animation finished (2 seconds)\n    if (props.open) {\n      const allowOverflowTrue = () => {\n        setAllowOverflow(true);\n      };\n      const toolTipTimer = setTimeout(allowOverflowTrue, 2000);\n\n      return () => {\n        clearTimeout(toolTipTimer);\n      };\n    }\n    //  If component gets closed after being open, imediately set overflow to false.\n    else {\n      setAllowOverflow(false);\n    }\n  }, [props.open, allowOverflow]);\n\n  const currentTechString = () => {\n    let output = [...props.currentTechs];\n    if (output.length > 1) {\n      let lastTech = output.pop();\n      return [...output, \"and\", lastTech].join(\" \");\n    }\n\n    return output[0];\n  };\n\n  return (\n    <>\n      <div className=\"drawer__outer\">\n        <button\n          className=\"plus__button\"\n          onClick={props.toggle}\n          aria-label=\"Filter Projects by Technology\"\n          aria-expanded={props.open}\n        >\n          <div className=\"plus__label\">Filter</div>\n          <div className=\"plus__inner\">\n            <svg className=\"plus__icon\" width=\"24\" height=\"24\" style={ props.open ? {transform:\"rotate(45deg)\"} : null}>\n              <rect width=\"24\" height=\"24\" fill=\"none\" rx=\"0\" ry=\"0\" />\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M11 17C11 17.55 11.45 18 12 18C12.55 18 13 17.55 13 17V13H17C17.55 13 18 12.55 18 12C18 11.45 17.55 11 17 11H13V7C13 6.45 12.55 6 12 6C11.45 6 11 6.45 11 7V11H7C6.45 11 6 11.45 6 12C6 12.55 6.45 13 7 13H11V17Z\"\n                fill=\"#ffffff\"\n              />\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM12 18C11.45 18 11 17.55 11 17V13H7C6.45 13 6 12.55 6 12C6 11.45 6.45 11 7 11H11V7C11 6.45 11.45 6 12 6C12.55 6 13 6.45 13 7V11H17C17.55 11 18 11.45 18 12C18 12.55 17.55 13 17 13H13V17C13 17.55 12.55 18 12 18Z\"\n                fill=\"#000000\"\n              />\n              <path\n                fillRule=\"evenodd\"\n                clipRule=\"evenodd\"\n                d=\"M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM12 18C11.45 18 11 17.55 11 17V13H7C6.45 13 6 12.55 6 12C6 11.45 6.45 11 7 11H11V7C11 6.45 11.45 6 12 6C12.55 6 13 6.45 13 7V11H17C17.55 11 18 11.45 18 12C18 12.55 17.55 13 17 13H13V17C13 17.55 12.55 18 12 18Z\"\n                fill=\"white\"\n                fillOpacity=\"0.01\"\n              />\n            </svg>\n          </div>\n        </button>\n        <span className=\"sr-only\" role=\"alert\">\n          {props.currentTechs.length < 1\n            ? \"Showing all projects.\"\n            : `Showing only projects which used: ${currentTechString()}`}\n        </span>\n      </div>\n      <div\n        className=\"drawer__inner container\"\n        style={{\n          height: `${\n            props.open ? (mediaState.smBreakPoint ? \"36vh\" : \"18vh\") : \"0\"\n          }`,\n          overflow: `${allowOverflow && props.open ? \"visible\" : \"hidden\"}`,\n        }}\n      >\n        {/* Info about selected tech for screen readers */}\n        {props.children}\n      </div>\n    </>\n  );\n}\n\nexport default ButtonDrawer;\n","import React from \"react\";\nimport ProjectCard from \"./ProjectCard\";\nimport projects from \"../assets/projects.json\";\nimport TechSelect from \"./TechSelect\";\nimport Techs from \"../assets/techs.json\";\nimport ButtonDrawer from \"./ButtonDrawer\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nclass Portfolio extends React.Component {\n  state = {\n    selectedTechs: [],\n    drawerOpen: false,\n  };\n\n  toggleTech = (tech) => {\n    // If tech is 'reset' blank out tech list\n    if (tech === \"reset\") {\n      this.setState({ selectedTechs: [] });\n      return;\n    }\n\n    // Adds or removes the tech (string) from the selectedTechs array in the state\n    let updatedTechList;\n    if (this.state.selectedTechs.includes(tech)) {\n      updatedTechList = this.state.selectedTechs.filter(\n        (item) => item !== tech\n      );\n    } else {\n      updatedTechList = [tech, ...this.state.selectedTechs];\n    }\n\n    this.setState({ selectedTechs: updatedTechList });\n  };\n\n  hasSelectedTechs = (stack) => {\n    // If no techs are selected, alwasy return truthy number 1\n    // If card has all selected techs, return truthy number 2\n    // If card is missing one or more selected techs, return falsy number 0\n    if (this.state.selectedTechs.length === 0) {\n      return 1;\n    }\n\n    for (let i = 0; i < this.state.selectedTechs.length; i++) {\n      if (!stack.includes(this.state.selectedTechs[i])) {\n        return 0;\n      }\n    }\n\n    return 2;\n  };\n\n  isSelectedTech = (tech) => {\n    if (this.state.selectedTechs.length === 0) {\n      return 1;\n    }\n\n    if (this.state.selectedTechs.includes(tech)) {\n      return 2;\n    }\n\n    return 0;\n  };\n\n  toggleDawer = () => {\n    // For tech drawer (ButtonDrawer) open/close\n    // If closing drawer, also reset techs\n    if (this.state.drawerOpen) {\n      this.toggleTech(\"reset\");\n    }\n    this.setState({ drawerOpen: !this.state.drawerOpen });\n  };\n\n  render() {\n    return (\n      <MediaContext.Consumer>\n        {(context) => {\n          const { cantHover, smBreakPoint } = context;\n          return (\n            <div className=\"container\" id=\"portfolioSection\">\n              {\" \"}\n              {/* Id used for linking to section, not for css. DO NOT DELETE. */}\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <h1>Portfolio</h1>\n                  <hr className=\"portfolio__hr\" />\n                </div>\n              </div>\n              <ButtonDrawer\n                open={this.state.drawerOpen}\n                toggle={this.toggleDawer}\n                currentTechs={this.state.selectedTechs}\n              >\n                <div className=\"row justify-content-center\">\n                  {Techs.map((tech, i) => {\n                    return (\n                      <TechSelect\n                        key={i}\n                        name={tech.name}\n                        image={tech.image}\n                        caseSensitiveName={tech.caseSensitiveName}\n                        toggleTech={this.toggleTech}\n                        highlight={this.isSelectedTech(tech.name)}\n                        suppressTooltip={cantHover}\n                        open={this.state.drawerOpen}\n                      />\n                    );\n                  })}\n                  <div\n                    style={{ paddingTop: \"6vh\", paddingBottom: \"6vh\" }}\n                    className=\"col-2 col-md-1 btn btn-link\"\n                    onClick={() => this.toggleTech(\"reset\")}\n                    role=\"button\"\n                    aria-label={`Reset Filter: Show all projects`}\n                    tabIndex={this.state.drawerOpen ? \"0\" : \"-1\"}\n                    aria-hidden={!this.state.drawerOpen}\n                  >\n                    Reset\n                  </div>\n                </div>\n              </ButtonDrawer>\n              <div className=\"row\">\n                {projects.map((project, i) => {\n                  return (\n                    <ProjectCard\n                      key={i}\n                      width={project.width}\n                      imageName={project.imageName}\n                      title={project.title}\n                      repoLink={project.repoLink}\n                      deployLink={project.deployLink}\n                      highlight={this.hasSelectedTechs(project.techStack)}\n                      mobileSize={smBreakPoint}\n                      summary={project.summary}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          );\n        }}\n      </MediaContext.Consumer>\n    );\n  }\n}\n\nexport default Portfolio;\n","import React from \"react\";\n\nclass ContactCard extends React.Component {\n  // Props:\n  // imageName: file name of image to be displayed\n  // title: Alt Text\n  // link: link to social site or file\n  // customClickAction: Icon is rendered as a button instead and uses the supplied function as its onclick\n\n  linkToRepo = () => {\n    window.open(this.props.repoLink);\n  };\n\n  render() {\n    return (\n      <div className=\"contact__container\">\n        <div\n          className=\"contact__card\"\n          href={this.props.repoLink}\n          target=\"_blank\"\n        >\n          {this.props.customClickAction ? (\n            <button\n              onClick={this.props.customClickAction}\n              className=\"contact__link btn btn-link\"\n            >\n              <img\n                className=\"contact__image img-fluid\"\n                src={`${process.env.PUBLIC_URL}/social_images/${this.props.imageName}`}\n                alt={this.props.title}\n              />\n            </button>\n          ) : (\n            <a\n              href={this.props.link}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"contact__link\"\n            >\n              <img\n                className=\"contact__image img-fluid\"\n                src={`${process.env.PUBLIC_URL}/social_images/${this.props.imageName}`}\n                alt={this.props.title}\n              />\n            </a>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ContactCard;\n","import React from \"react\";\nimport ToolTip from \"./ToolTip\";\nimport ContactCard from \"./ContactCard\";\nimport { MediaContext } from \"../contexts/MediaContext\";\n\nclass Contact extends React.Component {\n  state = { showEmailPopup: false };\n\n  togglePopup = () => {\n    this.setState({ showEmailPopup: !this.state.showEmailPopup });\n  };\n\n  copyEmail = () => {\n    // Get the text field\n    const copyText = document.getElementById(\"contact__email\");\n\n    // Select the text field\n    copyText.select();\n    copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n\n    // Copy the text inside the text field\n    document.execCommand(\"copy\");\n  };\n\n  emailTooltipInner = (bgWhite) => {\n    return (\n      <div className=\"container\" tabIndex=\"-1\">\n        <div className=\"row\">\n          <textarea\n            id={`${bgWhite ? \"contact__email--blue\" : \"contact__email\"}`}\n            className=\"col-12 text-center p-0 m-0\"\n            value=\"DanielJasonGold@gmail.com\"\n            readOnly\n          />\n        </div>\n        <div className=\"row\">\n          <button\n            className={`btn btn-sm btn-light mx-auto ${ bgWhite ? \"modal__button--blue\" : ''}`}\n            onClick={this.copyEmail}\n          >\n            Copy\n          </button>\n          <a\n            className={`btn btn-sm btn-light mx-auto ${ bgWhite ? \"modal__button--blue\" : ''}`}\n            href=\"mailto:DanielJasonGold@gmail.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Compose\n          </a>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <MediaContext.Consumer>\n        {(context) => {\n          const { smBreakPoint, isIE } = context;\n          return (\n            <div className=\"container\" id=\"contactSection\">\n              <div className=\"row\">\n                <div className=\"col-12 mt-5\">\n                  <h1>Contact</h1>\n                  <hr className=\"contact__hr\" />\n                </div>\n              </div>\n              <div className=\"row \">\n                <div className=\"col-6 col-md-3 p-1 p-md-2\">\n                  <ContactCard\n                    imageName=\"twitter.svg\"\n                    title=\"Daniel Gold on Twitter\"\n                    link=\"https://twitter.com/DanJGold\"\n                  />\n                </div>\n                <div className=\"col-6 col-md-3 p-1 p-md-2\">\n                  <ContactCard\n                    imageName=\"linkedin.svg\"\n                    title=\"Daniel Gold on LinkedIn\"\n                    link=\"https://www.linkedin.com/in/danjasongold/\"\n                  />\n                </div>\n                <div className=\"col-6 col-md-3 p-1 p-md-2\">\n                  <ContactCard\n                    imageName=\"github.svg\"\n                    title=\"LandGod on GitHub\"\n                    link=\"https://www.github.com/landgod\"\n                  />\n                </div>\n                <div className=\"col-6 col-md-3 p-1 p-md-2\">\n                  <ToolTip\n                    content={this.emailTooltipInner(smBreakPoint ? true : false)}\n                    showTooltip={this.state.showEmailPopup}\n                    flip={true}\n                    activationType=\"click\"\n                    responsive=\"true\"\n                    offset=\"-115px\"\n                    subModal={smBreakPoint || isIE ? true : false}\n                  >\n                    <ContactCard\n                      imageName=\"email.svg\"\n                      title=\"DanielJasonGold@gmail.com\"\n                      customClickAction={this.togglePopup}\n                    />\n                  </ToolTip>\n                </div>\n              </div>\n            </div>\n          );\n        }}\n      </MediaContext.Consumer>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { useState, useEffect } from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nconst { Brand, Toggle, Collapse } = Navbar;\n\nfunction NavBar() {\n  const [open, setOpen] = useState(false);\n  const [overflow, setOverflow] = useState(false);\n\n  useEffect(() => {\n    // Trigger reveal navbar (via making height not 0) as soon as user scrolls page.\n    // Should never do anything after that inital scroll\n    let onScroll;\n\n    if (!open) {\n      onscroll = (e) => {\n        // Check for [tab] press\n        if (e.keyCode) {\n          if (e.keyCode !== 9) {\n            return;\n          }\n        }\n        // Reveal navbar\n        setOpen(true);\n        // After reveal is finished, allow overflow permanently so that hamburger menue works\n        setTimeout(() => setOverflow(true), 2000);\n      };\n\n      window.addEventListener(\"scroll\", onscroll, { once: \"true\" });\n      window.addEventListener(\"keyup\", onscroll, { once: \"true\" });\n    }\n    return () => {\n      if (onScroll) {\n        window.removeEventListener(\"scroll\", onscroll);\n        window.removeEventListener(\"keyup\", onscroll);\n      }\n    };\n  });\n\n  return (\n    <div\n      className=\"nav__opener\"\n      style={{\n        height: open ? \"54px\" : \"0px\",\n        overflow: overflow ? \"visible\" : \"hidden\",\n      }}\n    >\n      <Navbar className=\"bg-light\" expand=\"md\" role=\"navigation\">\n        <Brand href=\"#aboutSection\" aria-label=\"\">Dan Gold</Brand>\n        <Toggle\n          aria-controls=\"responsive-navbar-nav\"\n          aria-label=\"Toggle navigation\"\n        />\n        <Collapse id=\"responsive-navbar-nav\" className=\"justify-content-end\">\n          <Nav>\n            <Nav.Link href=\"#portfolioSection\">Portfolio</Nav.Link>\n            <Nav.Link href=\"#contactSection\">Contact</Nav.Link>\n            <Nav.Link\n              href={`${process.env.PUBLIC_URL}/DanielGold.pdf`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Resume\n            </Nav.Link>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport About from \"./components/About\";\nimport Portfolio from \"./components/Portfolio\";\nimport Contact from \"./components/Contact\";\nimport NavBar from \"./components/NavBar\";\nimport MediaContextProvider from \"./contexts/MediaContext\";\n\n// Import css. Important that mainApp is imported AFTER boostrap so that it can override certain boostrap styles.\n// Note that boostrap.css is a cherry-picked version of the normal boostrap css file leaving out most of the bit that I'm not using.\nimport \"./bootstrap.css\";\nimport \"./mainApp.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <MediaContextProvider>\n        <About/>\n        <Portfolio/>\n        <Contact />\n      </MediaContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}